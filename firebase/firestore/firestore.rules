rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
  function isAnyAuthentication(){
  return request.auth != null;
  }
  
  //誰がこのデータを触っているのかという認可
  function isUserAuthenticated(userId){
   return isAnyAuthentication() && userId == request.auth.uid
  }
  
  // createdAtとupdatedAtのチェック
  function checkCreatedAtAndUpdatedAt(){
   let checkCreatedAt = (request.resource.data.createdAt is timestamp && request.resource.data.createdAt == request.time);
   let checkUpdatedAt = (request.resource.data.updatedAt is timestamp && request.resource.data.updatedAt == request.time);
   return checkCreatedAt && checkUpdatedAt;
  }

  // path取得
  function documentPath(paths){
    return path([['databases', database, 'documents'].join('/'), paths.join('/')].join('/'));
  }

  // ユーザーがMessageBordを保有しているかどうか
  function isUserOwnMessageBord(mesageBordId){
    return exists(documentPath(['users', request.auth.uid, 'own_message_bords', messageBordId]));
  }

  // ユーザーの役割がownerかどうか
  function isUserOwner(messageBordId){
    return get(documentPath(['users', request.auth.uid, 'own_message_bords', messageBordId])).data.role == 'owner';
  }

  
  match /users/{userId}{
    // GET
     allow get: if isUserAuthenticated(userId);
     // List
     allow list: if isAnyAuthentication();
     // Create
     allow create: if isUserAuthenticated(userId)
     // 特定のフィールド以外書き込めないようにする
     && request.resource.data.keys().hasOnly(['id','name', 'createdAt', 'updatedAt'])
     // 特定のフィールドを必須
     && request.resource.data.keys().hasAll(['id', 'name', 'createdAt', 'updatedAt'])
     // idのバリデーション
     && (request.resource.data.id is string && request.resource.data.id == userId && request.resource.data.id.size() <= 225)
     // nameのバリデーション
     && (request.resource.data.name is string && request.resource.data.name.size() <= 30)
     // createsAtとUpdatedAtのバリデーション
     && checkCreatedAtAndUpdatedAt()
     ;

    //  //Update
    //  allow update: if isUserAuthenticated(userId) && request.resource.data.updatedAt == request.time;

     
     match /own_message_bords/{ownMessageBordId}{
       //GET and List
       allow read: if isUserAuthenticated(userId);
       //Create
       allow create: if isUserAuthenticated(userId)
       // 特定のフィールド以外書き込めないようにする
       && request.resource.data.keys().hasOnly(['messageBordRef', 'role'])
      //  // 特定のフィールドを
       && request.resource.data.keys().hasAll(['messageBordRef', 'role'])
      //  // statueのバリデーション
       && request.resource.data.role is string && request.resource.data.role in ['receiver', 'owner', 'participant']
      //  // メッセージボード参照のバリデーション
       && request.resource.data.messageBordRef is path
       // createsAtとUpdatedAtのバリデーション
      //  && checkCreatedAtAndUpdatedAt()
      //  // messageBord(本体)が存在保存された後に保存
      //  && getAfter(documentPath(['message_bords', ownMessageBordId])).data.id == ownMessageBordId
      ;
       //Update
       allow update: if isUserAuthenticated(userId) && request.resource.data.updatedAt == request.time;
     }
  }
  
  match /message_bords/{messageBordId}{
    // GET
    allow get: if isAnyAuthentication();
    //List
    allow list: if isAnyAuthentication();
    // Update
    allow update: if isUserOwnMessageBord(messageBordId) 
    // ユーザーロール確認
    && isUserOwner(messageBordId)
    && request.resource.data.updatedAt == request.time;

    // Create
    allow create: if isAnyAuthentication();
    // && getAfter(documentPath(['users', request.auth.uid, 'own_message_bords', messageBordId])).data.id == messageBordId;

    match /messages/{messageId}{
      //Create
      allow create: if isAnyAuthentication();
      // GET
      allow get: if isAnyAuthentication();
      // LIST
      allow list: if isAnyAuthentication();
      // Update
      allow update: if isAnyAuthentication();
    }
  }
    //   match /{document=**} {
    //   allow read, write: if request.auth != null;
    // }
  }
}